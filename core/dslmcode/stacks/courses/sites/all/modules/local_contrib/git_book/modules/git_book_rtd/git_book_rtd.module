<?php
/**
 * @file
 * Code for the Git book: Read the Docs.
 */

/**
 * Implements hook_git_book_parser().
 */
function git_book_rtd_git_book_parser() {
  $parser['rtd'] = array(
    'name'   => t('Read the Docs'),
    'init'   => '_git_book_rtd_make_yml',
    'parser' => 'git_book_rtd_git_book_parse',
    'path'   => 'git_book_rtd_construct_path',
  );

  return $parser;
}

/**
 * Callback for git_book_rtd_git_book_parser to build mkdocs.yml
 */
function _git_book_rtd_make_yml($path, $node, $pages = array()) {
  $mkdocs = array(
    'site_name' => $node->title,
    'theme' => 'readthedocs',
    'site_author' => $GLOBALS['user']->name,
    'repo_name' => $node->title,
    'pages' => $pages,
  );
  @yaml_emit_file($path . '/mkdocs.yml', $mkdocs);
}

/**
 * Callback to modify path for git_book_rtd_git_book_parser.
 */
function git_book_rtd_construct_path($path, $node) {
  $tmp = $node;
  $title_path = '';
  $mkdocs = yaml_parse_file($path . '/mkdocs.yml');
  // keep walking backwards adding parents for path
  // until we hit the book root then stop
  while ($tmp->nid != $node->book['bid']) {
    if ($node->title != $tmp->title) {
      $title_path = $tmp->title . '/' . $title_path;
    }
    // load parent
    $plid = menu_link_load($tmp->book['plid']);
    // get nid from path
    $nid = str_replace('node/', '', $plid['link_path']);
    // load for the next run
    $tmp = node_load($nid);
  }
  // rebuild the yaml file page structure based on outline
  $pages = _git_book_tree($node->book['bid']);
  _git_book_rtd_make_yml($path, $node, $pages);
  return $path . '/docs/' . $title_path;
}

/**
 * Callback to parse git_book_rtd_git_book_parser.
 */
function git_book_rtd_git_book_parse($path, $node) {
  $ymlstructure = $path . '/mkdocs.yml';
  if (file_exists($ymlstructure)) {
    $mkdocs = yaml_parse_file($ymlstructure);
    if (isset($mkdocs['pages']) && is_array($mkdocs['pages'])) {
      _git_book_rtd_parse($mkdocs['pages'], $path .'/docs/', $node);
      return $mkdocs['pages'];
    }
  }
}

/**
 * Parse a Read the Docs style repo
 * @param  array  &$rtd      level of the structure
 * @param  string  $path     path to the docs folder
 * @param  object  $parent   parent node
 */
function _git_book_rtd_parse(&$rtd, $path, $parent, $weight = -15) {
  // this helps keep the pages in the same order they were parsed in
  // run through each level
  foreach ($rtd as $key => $contents) {
    $weight++;
    // see if this has content under it or not
    if (is_array($contents)) {
      // default to the parent item
      $node = $parent;
      // if this isn't an array key it means its a level without content
      if (!is_numeric($key)) {
        $node = _git_book_make_node($key, '', $parent, $weight);
        $weight = -15;
      }
      // drop down another level and keep going
      _git_book_rtd_parse($contents, $path, $node, $weight);
    }
    else {
      $body = '';
      // ensure this file exists
      if (file_exists($path . $contents)) {
        $body = file_get_contents($path . $contents);
      }
      // create the page
      $node = _git_book_make_node($key, $body, $parent, $weight);
    }
  }
}
