<?php
/**
 * @file
 * LTI integration into the CIS setup.
 */

/**
 * Implements hook_lti_tool_provider_launch_alter().
 */
function cis_lti_lti_tool_provider_launch_alter(&$launch_info, $account) {
  // look at section requested
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_sections')
    ->propertyCondition('archived', 0, '=')
    ->fieldCondition('field_access_string', 'value', $launch_info['context_id'], '=')
    ->addMetaData('account', user_load(1)) // Run the query as user 1.
    ->execute();
  // if no items were returned this is a new course / nonexistant course
  if (isset($result['field_collection_item'])) {
    $items = array_keys($result['field_collection_item']);
    // only want 1 item, should only be 1
    $item_id = array_pop($items);
    // return the instances available to this section
    $course = _cis_helper_derive_parent($item_id);
    $service_instances = _cis_helper_derive_service_instances($item_id, $course);
    // site's base url must be set for resigning
    global $base_url;
    // spider each instance and perform an LTI launch to seed user in all systems
    foreach ($service_instances as $instance) {
      $service = node_load($instance->field_services[LANGUAGE_NONE][0]['target_id']);
      // build the distro settings
      $distro_settings = _cis_connector_build_registry($service->field_distribution[LANGUAGE_NONE][0]['value']);
      // build the location for the launch
      $location = _cis_connector_format_address($distro_settings, '/' . $course->field_machine_name[LANGUAGE_NONE][0]['value'], 'front');
      // grab object from the current site's address
      if ($consumer = _cis_lti_consumer_from_address($base_url)) {
        // perform lti launch against another service
        cis_lti_service_post($launch_info, $consumer->lti_tool_provider_consumer_key, $location . '/lti');
      }
    }
    //
    foreach ($service_instances as $instance) {
      // load of the service node in question
      $service = node_load($instance->field_services[LANGUAGE_NONE][0]['target_id']);
      // build the distro settings
      $distro_settings = _cis_connector_build_registry($service->field_distribution[LANGUAGE_NONE][0]['value']);
      // build the location for the launch
      $location = _cis_connector_format_address($distro_settings, '/' . $course->field_machine_name[LANGUAGE_NONE][0]['value'], 'front');
      // account for different types of services
      switch ($service->field_machine_name[LANGUAGE_NONE][0]['value']) {
        // @todo work through launch location details in LMS
        // currently course is the only specific case and has priority in naming
        case CIS_HELPER_COURSE_SERVICE:
          drupal_goto($location);
        break;
        default:
          drupal_goto($location);
        break;
      }
    }
    // in this case we found nothing, so do nothing and present message
    drupal_set_message(t('Course space not available, please contact your instructor'), 'warning');
  }
  else {
    // present form prepopulated for Instructor role
    if (in_array('Instructor', array_values($account->roles))) {
      // convert LTI launch values into json encoded string
      $options = array(
        'query' => array(
          'lti_launch' => drupal_json_encode($launch_info),
        ),
      );
      // pass the launch over to the quick setup form
      drupal_goto('cis-quick-setup', $options);
    }
  }
}

/**
 * Resign an LTI request and silently launch it against a service.
 *
 * @param string $params
 *   An array containing the POST data, eg, lti_message_type etc.
 * @param string $key
 *   The consumer key.
 * @param string $url
 *   URL of the LTI service.
 *
 * @return string
 *   HTTP response.
 */
function cis_lti_service_post($params, $key, $url) {
  $ext_response = FALSE;
  if (!empty($url)) {
    $params['oauth_consumer_key'] = $key;
    $oauth_consumer_key = $key;
    $store = new LTIToolProviderOAuthDataStore();
    $consumer = $store->lookup_consumer($oauth_consumer_key);
    $token = '';
    $hmac_method = new OAuthSignatureMethod_HMAC_SHA1();
    $request = OAuthRequest::from_consumer_and_token($consumer, $token, 'POST', $url, $params);
    $request->sign_request($hmac_method, $consumer, $token);
    $params = $request->get_parameters();
    // Connect to tool consumer.
    $options = array(
      'data' => http_build_query($params),
      'method' => 'POST',
      'max_redirects' => 5,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      'blocking' => FALSE,
    );
    // queue up the launch
    httprl_request($url, $options);
    // execuse request, we won't get a real response
    $ext_response = httprl_send_request();
  }
  return $ext_response;
}

/**
 * Return the public key for an LTI consumer.
 *
 * @param $address
 *   The web address for a consumer.
 * @return $consumer
 *   A fully loaded lti_tool_provider_consumer entity.
 */
function _cis_lti_consumer_from_address($address) {
  // new entity field query
  $query = new EntityFieldQuery;
  $result = $query
    // select all consumers
    ->entityCondition('entity_type', 'lti_tool_provider_consumer')
    // where the address for the consumer matches the asked for one
    ->propertyCondition('lti_tool_provider_consumer_consumer', $address, '=')
    // run the query as user 1
    ->addMetaData('account', user_load(1))
    ->execute();
  // if we found a consumer associated to this domain, load it
  // this will allow for proxy style LTI launches
  if (isset($result['lti_tool_provider_consumer'])) {
    // return item's key
    $items = array_keys($result['lti_tool_provider_consumer']);
    // this will only be one item cause of how LTI works
    $consumers = entity_load('lti_tool_provider_consumer', $items);
    // pop off the 1st result as there should only be one
    $consumer = array_pop($consumers);
    // return the object
    return $consumer;
  }
  // nothing found
  return FALSE;
}

/**
 * Implements hook_cis_service_instance_options_alter().
 */
function cis_lti_cis_service_instance_options_alter(&$options, $course, $service) {
  // if this module is enabled, all distributions will have LTI pings
  $options['en'][] = 'cis_service_lti';
  $options['fr'][] = 'cis_service_lti';
}
