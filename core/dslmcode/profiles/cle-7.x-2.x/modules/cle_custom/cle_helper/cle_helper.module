<?php
/**
 * @file
 * Code for the CLE distribution.
 */
// default node bundle / type for OG
define('CLE_HELPER_GROUP_BUNDLE', 'section');

/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 */
function cle_helper_form_node_form_alter(&$form, &$form_state, $form_id) {
  // if only part of one group select it automatically
  if (arg(0) == 'node' && arg(2) != 'edit' && in_array($form_id, array('cle_project_node_form', 'cle_assignment_node_form', 'cle_submission_node_form'))) {
    // if only 1 group, set to that value
    if (isset($form['og_group_ref']) && count($form['og_group_ref']['und'][0]['default']['#options']) == 2) {
      // flip around to get key associations
      $tmp = array_keys($form['og_group_ref']['und'][0]['default']['#options']);
      // array 0 is always '_none' so take the only other option
      $form['og_group_ref']['und'][0]['default']['#default_value'] = $tmp[1];
    }
  }
  // reset these group specific values if a group reference exists
  if (isset($form['og_group_ref']['und'][0])) {
    // this allows us to avoid having to use string_overrides module
    $form['og_group_ref']['und'][0]['default']['#title'] = t('Your Section');
    $form['og_group_ref']['und'][0]['default']['#description'] = t('Associate your submission with your course section.');
  }
  // make items show up in horizontal tab, less realestate taken
  $form['additional_settings']['#type'] = 'horizontal_tabs';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function cle_helper_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // look for the cle submissions views
  if (strpos($form['#id'], 'cle-submissions-page') && isset($form['field_assignment_target_id'])) {
    // pull out the options so we can set new ones
    $options = $form['field_assignment_target_id']['#options'];
    $newoptions = array('All' => t('- Any -'));
    // load the related entities
    $assignments = entity_load('node', array_keys($options));
    // loop through assignment entities to assemble
    foreach ($assignments as $assignment) {
      $disabled = FALSE;
      $name = $assignment->title;
      // see if it is a private submission
      if ($assignment->field_assignment_privacy_setting['und'][0]['value'] == 'closed') {
        $name .= '(' . t('Private') . ')';
        $disabled = TRUE;
      }
      // if it should be disabled then keep it in the list but disable it
      if ($disabled) {
        $key = $name;
        $value = array();
      }
      else {
        $key = $assignment->nid;
        $value = check_plain($name);
      }
      // append our modified (potentially) output to the options
      $newoptions[$key] = $value;
    }
    $form['field_assignment_target_id']['#options'] = $newoptions;
  }
}

/**
 * Implements hook_elmsln_core_service_settings().
 * @return array options for this service
 */
function cle_helper_elmsln_core_service_settings($section = NULL) {
  $options = array();
  return $options;
}

/**
 * Implements hook_node_insert().
 */
function cle_helper_node_insert($node) {
  // make sure there's project associated with this section if not master
  if ($node->type == 'section' && empty($node->field_section_projects['und'])) {
    // load the master section, ensure this isn't that!
    $gid = _cis_section_load_section_by_id(CIS_SECTION_MASTER);
    if ($gid && $node->nid != $gid) {
      $master = node_load($gid);
      // ensure we have projects
      if (isset($master->field_section_projects['und'])) {
        // if there aren't any then this will just do nothing in the end, oh well. very rare
        foreach ($master->field_section_projects['und'] as $projectref) {
          $project = node_load($projectref['target_id']);
          // make sure we can load something
          if ($project) {
            // replicate the project
            $project_clone = replicate_clone_entity('node', $project);
            // make sure the below condition doesn't get tripped
            // associate the cloned project with this new section
            $project_clone->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $node->nid;
            // save so we generate an nid
            node_save($project_clone);
            // set the reverse reference into the section from the project we just made
            $node->field_section_projects['und'][] = array('target_id' => $project_clone->nid);
            // loop through the steps for this project if it has any
            if (!empty($project_clone->field_project_steps['und'])) {
              $steps = $project_clone->field_project_steps['und'];
              /// unset this so we can rebuild with the new references
              $project_clone->field_project_steps['und'] = array();
              // loop through and clone assignments based on what we found
              foreach ($steps as $assignmentref) {
                // make sure we can load
                $assignment = node_load($assignmentref['target_id']);
                 if ($assignment) {
                  // clone but don't save
                  $assignment_clone = replicate_clone_entity('node', $assignment);
                  // manually set project to the new one
                  $assignment_clone->field_assignment_project['und'][0]['target_id'] = $project_clone->nid;
                  // set the section for the assignment
                  $assignment_clone->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $node->nid;
                  // makes sure we don't double save and create a huge nightmare
                  $assignment_clone->_isclone = TRUE;
                  node_save($assignment_clone);
                  // set the reference reference into the project steps
                  $project_clone->field_project_steps['und'][] = array('target_id' => $assignment_clone->nid);
                }
              }
              // save the project steps so we get the references
              node_save($project_clone);
            }
          }
        }
      }
    }
  }
  // add the reverse reference to section from project
  else if ($node->type == 'cle_project' && isset($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
    $section = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);
    $section->field_section_projects['und'][] = array('target_id' => $node->nid);
    node_save($section);
  }
  // add the reverse reference to project from assignment
  else if ($node->type == 'cle_assignment' && isset($node->field_assignment_project['und'][0]['target_id']) && !isset($node->_isclone)) {
    $project = node_load($node->field_assignment_project['und'][0]['target_id']);
    $project->field_project_steps['und'][] = array('target_id' => $node->nid);
    node_save($project);
  }
}

/**
 * Implements hook_node_presave().
 */
function cle_helper_node_presave($node) {
  if ($node->type == 'cle_submission' && $node->uid != $GLOBALS['user']->uid) {
    $account = user_load($node->uid);
    // verify this account is a learner but probably being submitted by an admin
    if (_cis_connector_role_grouping('learner', $account)) {
      // account for BS
      if (isset($account->og_user_node)) {
        $node->og_group_ref['und'] = $account->og_user_node['und'];
      }
      else if (isset($account->og_user_node1)) {
        $node->og_group_ref['und'] = $account->og_user_node1['und'];
      }
      else if (isset($account->og_user_node2)) {
        $node->og_group_ref['und'] = $account->og_user_node2['und'];
      }
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function cle_helper_form_editableviews_entity_form_cle_assignment_bulk_alter(&$form, &$form_state, $form_id) {
  // add quick link to create a new assignment when managing bulk assignment operations
  $form['cle_add_new']['#markup'] = l(t('Create new Assignment'), 'node/add/cle-assignment', array('query' => array('og_group_ref' => arg(1))));
  $form['cle_add_new']['#weight'] = 100;
}

/**
 * Implements hook_get_group_content_ids_query_alter().
 */
function cle_helper_get_group_content_ids_alter(&$ids) {
  // array of content types to remove from cloning
  $content_types = array('cle_submission');
  // pull out nodes for testing as this could have other entities
  foreach ($ids as $key => $id) {
    if ($id['entity_type'] == 'node') {
      $id_key[$key] = $id['etid'];
    }
  }
  // Don't allow submissions to be cloned
  $query = new EntityFieldQuery();
  // select all nodes
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', $content_types, 'IN')
  // where the nid matches
  ->propertyCondition('nid', $id_key, 'IN')
  // run as user 1
  ->addMetaData('account', user_load(1));
  $result = $query->execute();
  // verify that we have results
  if (isset($result['node'])) {
    // test the node array against the nodes in the clone array
    foreach ($result['node'] as $node) {
      // if the node selected is in the array, remove it from the ids
      if (in_array($node->nid, $id_key)) {
        unset($ids[array_search($node->nid, $id_key)]);
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 * This allows us to relate nodes with comment statistics in an EFQ
 * so that we can pull things that don't have comments
 */
function cle_helper_query_nocomments_alter(QueryAlterableInterface $query) {
  $query->join('node_comment_statistics', 'ncs', 'ncs.nid = node.nid');
  $query->fields('ncs', array('comment_count'));
  $query->condition('ncs.comment_count', 0, '=');
}

/**
 * Implements hook_page_build().
 */
function cle_helper_page_build(&$page) {
  drupal_add_css(drupal_get_path('module', 'cle_helper') . '/css/cle_helper.css');
}

/**
 * Implement hook_ecd_ignored_types_alter().
 */
function cle_helper_ecd_ignored_types_alter(&$ignore) {
  // don't send details about the cle_submission type
  // as we don't audit the accessibility of student submissions
  $ignore[] = 'cle_submission';
  $ignore[] = 'cle_critique';
}

/**
 * Implement hook_ecd_asset_type_alter().
 */
function cle_helper_ecd_asset_type_alter(&$type, $node) {
  // anything coming from here is content
  $type = 'content';
}

/**
 * Implements hook_wrapped_paths().
 */
function cle_helper_wrapped_paths() {
  $paths = array(
    'node/*' => FALSE,
    'cle/app' => FALSE,
    'cle/app/*' => FALSE,
  );
  return $paths;
}

/**
 * Implements hook_foundation_access_tabs_alter().
 */
function cle_helper_foundation_access_tabs_alter(&$tabs) {
  $tabs[] = 'node/%/data';
  $tabs[] = 'node/%/view';
  $tabs[] = 'comment/%/view';
  $tabs[] = 'comment/%/delete';
  $tabs[] = 'comment/%/devel';
}
