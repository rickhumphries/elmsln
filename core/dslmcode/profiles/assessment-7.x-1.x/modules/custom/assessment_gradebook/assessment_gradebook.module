<?php
/**
 * @file Gradebook module to provide the grid
 */

/**
 * Implements hook_menu().
 */
function assessment_gradebook_menu() {
  $items['gradebook/grid'] = array(
    'title' => 'Gradebook',
    'description' => 'Change system settings for your course.',
    'type' => MENU_LOCAL_TASK,
    'menu' => 'menu_cis_toolkit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('assessment_gradebook_grid_form'),
    'access arguments' => array('access gradebook'),
    'file' => 'assessment_gradebook.pages.inc',
  );
  $items['gradebook/render/%ctools_js/%/%'] = array(
      'title' => 'Submission Viewer',
      'page arguments' => array(2, 3, 4),
      'page callback' => '_assessment_gradebook_modal_page',
      'access arguments' => array(3),
      'access callback' => '_assessment_gradebook_access_modal',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['gradebook/ajax/%/%/%'] = array(
      'title' => 'AJAX Save assessment state',
      'page arguments' => array(2, 3, 4),
      'page callback' => '_assessment_gradebook_ajax_save',
      'access arguments' => array('access gradebook'),
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function assessment_gradebook_permission() {
  return array(
    'access gradebook' =>  array(
      'title' => t('Access gradebook'),
      'description' => t('Grants access to the gradebook'),
      'restrict access' => TRUE,
      'warning' => t('Gradebook contains sensitive data, only grant this access to individuals that are trusted.'),
    ),
  );
}

/**
 * Callback for gradebook/ajax/%
 */
function _assessment_gradebook_ajax_save($token, $aid, $assessmentid) {
  // ensure we have a valid script token
  if (drupal_valid_token($token) && isset($aid) && isset($assessmentid)) {
    $flag = FALSE;
    $state = 'assessment_started';
    $points = NULL;
    foreach($_POST as $key => $value) {
      $$key = check_plain($value);
    }
    // special case, we are kicking this back to the student
    // at this point, state of the assessment is either kept alone
    // or set to started
    // save new assessment item
    if ($assessmentid == 'new') {
      $vals = array(
        'type' => 'graded_item',
        'status' => 1,
        'label' => t('Assessment by @name', array('@name' => $GLOBALS['user']->name))
      );
      $assessment = entity_create('assessment_item', $vals);
      $assessment->status = $state;
      $assessment->field_assignment_ref['und'][0]['target_id'] = $aid;
      entity_save('assessment_item', $assessment);
    }
    else {
      // update an existing item
      $assessment = entity_load_single('assessment_item', $assessmentid);
      $assessment->status = $state;
      entity_save('assessment_item', $assessment);
    }

    // structure return data
    $return = array(
      'state' => $assessment->status,
    );
    // edge case for backtostudent state to reflect on dashboard
    if ($backtostudent) {
      $return['status'] = 'submission_needs_work';
    }
    // return the assessment object now in the DB so we can update our grid
    print drupal_json_encode($return);
    exit;
  }
  print drupal_json_encode(FALSE);
  exit;
}

/**
 * Implements hook_block_info().
 */
function assessment_gradebook_block_info() {
  $blocks['assessment_submission_evaluation'] = array(
    'info' => t('Submission evaluation'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function assessment_gradebook_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'assessment_submission_evaluation':
      $block['subject'] = t('Submission evaluation');
      $block['content'] = _assessment_gradebook_submission_evaluation_callback();
    break;
  }
  return $block;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function assessment_gradebook_form_assessment_item_edit_submission_evaluation_form_alter(&$form, &$form_state, $form_id) {
 // populate assessment label
  $form['label']['#default_value'] = t('Assessment by @name', array('@name' => $GLOBALS['user']->name));
  $form['label']['#attributes']['class'][] = 'element-invisible';
  // check for having a default value for the associated submission
  if (isset($form['field_assessment_associated_submission']['und']['#default_value'][0])) {
    $form['field_assessment_associated_submission']['#attributes']['class'][] = 'element-invisible';
  }
}

/**
 * Callback to render entity creation form in a block or existing entity.
 * @return [type] [description]
 */
function _assessment_gradebook_submission_evaluation_callback() {
  // try to load item from address in the gradebook interface
  $nid = arg(4);
  if (!empty($nid) && is_numeric($nid) && $submission = node_load($nid)) {
    //drupal_get_form('assessment_gradebook_submission_evaluation');
    $form = array();
    $aid = FALSE;
    $type = 'assessment_item';
    $bundle = 'submission_evaluation';
    // see if this user has assessments for this entity
    $id = _cis_connector_assemble_entity_list($type, $bundle, 'assessment_item_id', 'assessment_item_id', array('field_assessment_associated_submission' => array('target_id', $nid, '=')));
    // make sure we have 1 assessment and no more for
    if (count($id) !== 0) {
      $aid = array_pop($id);
      $entity = entity_load_single($type, $aid);
      $default_state = $entity->status;
    }
    else {
      $default_state = '';
      $default_points = '';
    }
    // edge case, work has been marked as pushed back to student
    // this status overrides the assessment state
    if ($submission->status == 'submission_needs_work') {
      $default_state = 'submission_needs_work';
    }

    $form['submission'] = array(
      '#type' => 'hidden',
      '#name' => 'submission',
      '#value' => $submission->nid,
    );
    $form['aid'] = array(
      '#type' => 'hidden',
      '#name' => 'aid',
      '#value' => (!$aid ? 'new' : $aid),
    );
    // @todo this is where the rubric would hook in
    $form['assessment'] = array(
      '#type' => 'textfield',
      '#title' => t('Points'),
      '#name' => 'assessment',
      '#default_value' => $default_points,
    );
    $form['assessment_value'] = array(
      '#type' => 'hidden',
      '#name' => 'assessment_value',
      '#value' => $default_points,
    );
    $states = array(
      '' => t('- none -'),
      'assessment_started' => t('Assessment started'),
      'assessment_complete' => t('Assessment complete'),
      'assessment_available' => t('Assessment available'),
      'submission_needs_work' => t('Submission needs work*'),
    );
    $form['assessment_state'] = array(
      '#type' => 'select',
      '#name' => 'assessment_state',
      '#title' => t('Submission state'),
      '#options' => $states,
      '#default_value' => $default_state,
    );
    $form['assessment_state_value'] = array(
      '#type' => 'hidden',
      '#name' => 'assessment_state_value',
      '#value' => $default_state,
    );
    // @todo need to be able to support this via storage object
    $form['flag_submission'] = array(
      '#type' => 'checkbox',
      '#name' => 'flag_submission',
      '#title' => t('Flag for further review'),
      '#default_value' => 0,
    );
    $form['flag_submission_value'] = array(
      '#type' => 'hidden',
      '#name' => 'flag_submission_value',
      '#value' => 0,
    );
    $form['actions']['save'] = array(
      '#type' => 'button',
      '#value' => t('Save'),
    );
    // @todo add conditional textfield here that will email the student
    // from the instructor about what the issue is here while setting the
    // state.

    return drupal_render($form);
  }
  return FALSE;
}

/**
 * [_assessment_gradebook_access_modal description]
 * @return [type] [description]
 */
function _assessment_gradebook_access_modal($nid) {
  if (user_access('access gradebook')) {
    $node = node_load($nid);
    // make sure this can be shown
    if (node_access('view', $node)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * A modal static page callback.
 * @param $js
 *   boolean CTools determination whether the user's browser is javascript enabled.
 * @param $aid
 *   int     assessment id
 * @param $uid
 *  int      user id of the student's work
 * @return
 *   string  The contents of the node, that will fill the modal window.
 */
function _assessment_gradebook_modal_page($js = NULL, $aid = NULL, $uid = NULL) {
  if ($aid == NULL) {
    return t('No assessment id was sent.');
  }
  if ($uid == NULL) {
    return t('No author id was sent.');
  }
  if ($js) {
    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');
  }
  // Load the assessment object
  $assessment = entity_load_single('assessment_item', $aid);
  // ensure uid matches as a failsafe
  if ($assessment->field_grades_student['und'][0]['target_id'] != $uid) {
    return t('Author must match assessment requested');
  }

  $contents = render(entity_view('assessment_item', array($aid => $assessment), 'gradebook_viewer'));
  return ctools_modal_render($assessment->label, $contents);
}

/**
 * Callback to attach modal
 */
function _assessment_gradebook_attach_modal() {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  // Create our own javascript that will be used to theme a modal.
  $assessment_modal = array(
    'assessment-gradebook-modal' => array(
      'modalSize' => array(
        'type' => 'scale',
      ),
      'modalOptions' => array(
        'opacity' => .4,
        'background-color' => '#DDDDFF',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'assessment_gradebook_modal',
      'throbber' => theme('image', array('path' => ctools_image_path('throbber.gif', 'assessment_gradebook'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      'closeImage' => theme('image', array('path' => ctools_image_path('icon-close-window.png', 'assessment_gradebook'), 'alt' => t('Close window'), 'title' => t('Close window'), 'class' => array('disable-scroll'))),
    ),
    'assessmentGradebookToken' => drupal_get_token(),
  );
  // Add the settings array defined above to Drupal 7's JS settings:
  drupal_add_js($assessment_modal, 'setting');
  ctools_add_js('assessment_gradebook', 'assessment_gradebook');
  ctools_add_css('assessment_gradebook', 'assessment_gradebook');
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Since the exposed form is a GET form, we don't want it to send a wide
 * variety of information.
 */
function assessment_gradebook_form_assessment_gradebook_grid_form_alter(&$form, &$form_state, $form_id) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * assessment_gradebook_grid_form submit handler.
 */
function assessment_gradebook_grid_form_submit($form, &$form_state) {

}

/**
 * Helper function to convert an assessment's status into an image
 * @return string path to an image to load
 */
function _assessment_gradebook_assessment_status($assessment, $format = 'alt') {
  $indicators = _assessment_gradebook_get_status_indicators();
  // check that we have an assessment and that submission hasn't been returned
  // to the student to do additional work. After they'd set it back to ready
  // then the indicator light would switch to the assessment state.
  if (!empty($assessment) && $assessment->status != 'submission_needs_work') {
    $status = $assessment->status;
    $student = user_load($assessment->student);
    $name = $student->name;
  }
  else {
    $status = 'submission_unsubmitted';
    $name = '';
  }
  // convert status into image / text statements
  switch($status) {
    default:
      $text = t('@user\'s @name status: @status', array('@user' => $name, '@name' => $assessment->label, '@status' => $indicators[$status]['title']));
      $aid = $assessment->assessment_item_id;
      $class = "indicator-light assessment-submission-${aid}";
    break;
    case 'submission_unsubmitted':
      $text = t('status: @status', array('@status' => $indicators[$status]['title']));
      $class = "indicator-light assessment-submission-unsubmitted";
    break;
  }
  // output format of image, render the status indicator light
  if ($format == 'image') {
    $img = base_path() . $indicators[$status]['icon'];
    return "<img src=\"$img\" title=\"$text\" alt=\"$text\" width=\"16px\" height=\"16px\" class=\"$class\">";
  }
  else {
    return $text;
  }
}

/**
 * Implements hook_gradebook_status_indicators().
 */
function assessment_gradebook_gradebook_status_indicators() {
  $path = drupal_get_path('module', 'assessment_gradebook') . '/images/assessment/';
  $indicators = array(
    'submission_unsubmitted' => array(
      'title' => t('Submission unsubmitted'),
    ),
    'submission_ready' => array(
      'title' => t('Submission ready'),
    ),
    'submission_needs_work' => array(
      'title' => t('Submission needs work'),
    ),
    'assessment_started' => array(
      'title' => t('Assessment started'),
    ),
    'assessment_complete' => array(
      'title' => t('Assessment completed by instructor'),
    ),
    'assessment_available' => array(
      'title' => t('Assessment available to student'),
    ),
    'assessment_viewed' => array(
      'title' => t('Assessment viewed by student'),
    ),
  );
  // add in the icon keys
  foreach ($indicators as $key => $indicator) {
    $indicators[$key]['icon'] = $path . $key . '.png';
  }

  return $indicators;
}

/**
 * Helper function to load potential submission status types
 * @return array      status data
 */
function _assessment_gradebook_get_status_indicators() {
  $indicators = &drupal_static(__FUNCTION__);
  if (!isset($indicators)) {
    $indicators = module_invoke_all('gradebook_status_indicators');
    drupal_alter('gradebook_status_indicators', $indicators);
  }
  return $indicators;
}

/**
 * Callback to apply status indicator lights to a field.
 * @param  string $render   the field in question
 * @param  array $children  original render array
 * @return string           html of the field
 */
function _apply_assessment_status_field($render, $children) {
  $indicators = _assessment_gradebook_get_status_indicators();
  // loop through the indicators
  foreach ($indicators as $key => $status) {
    $text = t('status: @status', array('@status' => $status['title']));
    $img = "<img src=\"" . base_path() . $status['icon'] . "\" title=\"$text\" alt=\"$text\" width=\"16px\" height=\"16px\" class=\"indicator-light assessment-submission-$key\">";
    // replace the title with the title and status light
    $render = str_replace($status['title'], $img . $status['title'], $render);
  }
  return $render;
}
