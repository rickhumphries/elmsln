<?php
/**
 * @file
 * Code for the game show backend / some end point logic for saving
 */

/**
 * Implements hook_menu().
 */
function game_show_quiz_menu() {
  $items = array();
  $items['apps/game-show-scoreboard/save-score'] = array(
    'title' => 'save score',
    'page callback' => '_game_show_quiz_save_score',
    'page arguments' => array(3, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['apps/game-show-scoreboard/load-directions'] = array(
    'title' => 'Load directions',
    'page callback' => '_game_show_quiz_load_directions',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_hax_autoloader().
 */
function game_show_quiz_hax_autoloader() {
  return array('game-show-quiz');
}

/**
 * Backend to deliver directions for the game
 */
function _game_show_quiz_load_directions() {
  print "<strong>Important:</strong> Please read <strong>all</strong> of the following directions before starting the
quiz. <strong>Continue taking Jeopardy until you have attempted all 30 points and all open bonus questions.</strong>
<ul>
  <li>Questions come in four categories...</li>
</ul>
<h2>Jeopardy Directions</h2>

<strong>Important:</strong> Please read <strong>all</strong> of the following directions before starting the quiz. <strong>Continue taking Jeopardy until you have
attempted all 30 points and all open bonus questions.</strong>
<ol>
<li>Questions come in four categories, <strong>Slide Identification, Terminology, Reading</strong> (which can also include video) and
<strong>Lecture</strong> (concept-based).</li>

<li>All questions have 1 \"answer\" and 5 possible \"questions\", using the Jeopardy game show format.</li>

<li>Questions are worth 1, 2, or 3 points, as indicated on the board.</li>

<li>In each category, there are a total of four 1-point questions, two 2-point questions, and one 3-point question (11
points).</li>

<li>The board shows <strong>44 available</strong> points, but you can only attempt 30. <strong>Plan accordingly</strong>.</li>

<li>Located at the last column and last row of the board are 10 <strong>initially unavailable bonus points</strong> that are displayed in
a faded out view. The bonus questions in the bottom row are all 1-point questions, and the bonus questions in the last
column are worth 1 point, 2 points, and 3 points.</li>

<li><strong>In order to access the bonus points, you must complete the questions associated to the column or row that they are
in.</strong> For example, if you complete all 16 of the one-point questions, you will earn access to the one point bonus at the
far right hand column of the board. If you would like to earn access to the “Terms Bonus” at the bottom of the second
column, you must complete all of the Terms questions in that column. Once you gain access to a bonus question, the
choice will no longer be faded, and it will be available to answer any time during the quiz, even after your 30 regular
points have been attempted.</li>

<li>You <strong>MUST</strong> attempt no more than 30 points in total (the quiz should not allow you to do this), and no fewer than 30
(your responsibility to manage). <strong>Be sure to leave at least 1 one-pointer to finish with</strong>.</li>

<li>After each response submitted, you will receive immediate feedback indicating whether your response was correct or
incorrect. <strong>Be sure to read and take note of the guidance offered for incorrect answers</strong>.</li>

<li>The Jeopardy scoreboard (below) will tally your points attempted, points earned, category percentage, and points
remaining to attempt as you go. Please use this to your advantage in choosing questions and earning the maximum score.</li>

<li><strong>Category</strong> questions will only use images familiar to you from the visual note taking guides.</li>

<li><strong>Bonus</strong> questions often use images unfamiliar to you, requiring more analysis and reasoning on your part, and will
thus are harder than category questions. These questions do not test recall and recognition; instead, they test your
ability to apply what you know to deduce the correct answer.</li>

<li>You can improve your final score by taking a Jeopardy again. Note that the game board is designed to randomize the
selection of questions. Even if you repeated your selections exactly, you wouldn't see an identical set of questions.
Some will be new. As you gain knowledge, you may attempt more challenging strategies than you did at first. That is the
beauty of Jeopardy!</li>
</ol>";
exit;
}

/**
 * Callback to save score
 */
function _game_show_quiz_save_score($game, $score) {
  // todo need to verify session token for spam / cheating purposes
  global $user;
  if ($_GET['token'] == base64_encode($user->name)) {
    // @TODO NEED A KEY TO ENSURE THIS DOESNT JUST WORK
    $section = _cis_connector_section_context();
    // check if this user has a record already for this quiz
    $result = db_select('game_show_quiz', 'gsq')
      ->fields('gsq')
      ->condition('uid', $user->uid, '=') // this user
      ->condition('section', $section, '=') // in this section
      ->condition('game', $game, '=') // taking this quiz
      ->execute()
      ->fetchAssoc();
    // if we have anything, then we update
    if (!$result) {
      $scores = array();
      $dates = array();
      $scores[] = $score;
      $dates[] = time();
      db_insert('game_show_quiz')
      ->fields(array(
        'uuid' => uuid_generate(),
        'game' => $game,
        'section' => $section,
        'uid' => $user->uid,
        'dates' => json_encode($dates),
        'scores' => json_encode($scores),
      ))
      ->execute();
    }
    else {
      $scores = json_decode($result['scores']);
      $dates = json_decode($result['dates']);
      $scores[] = $score;
      $dates[] = time();
      db_update('game_show_quiz')
        ->fields(array(
          'dates' => json_encode($dates),
          'scores' => json_encode($scores),
        ))
        ->condition('uid', $user->uid, '=') // this user
        ->condition('section', $section, '=') // in this section
        ->condition('game', $game, '=') // taking this quiz
        ->execute();
    }
    $return = array(
      'response' => 200,
      'data' => t('Score recorded')
    );
  }
  else {
    $return = array(
      'response' => 403,
      'data' => t('Access denied, invalid token')
    );
  }
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', $return['status']);
  // output the response as json
  print drupal_json_encode($return);
  // skip official drupal exit routine so we can exit faster and
  // avoid possible integration issues with things like devel which
  // inject data on the way out the door
  exit;
}