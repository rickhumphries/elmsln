diff --git a/core/dslmcode/shared/drupal-7.x/modules/ulmus/bakery/bakery.module b/core/dslmcode/shared/drupal-7.x/modules/ulmus/bakery/bakery.module
index 8640390..0b957c6 100644
--- a/core/dslmcode/shared/drupal-7.x/modules/ulmus/bakery/bakery.module
+++ b/core/dslmcode/shared/drupal-7.x/modules/ulmus/bakery/bakery.module
@@ -216,7 +216,10 @@ function bakery_user_view($account, $view_mode, $langcode) {
  * Implements hook_boot().
  */
 function bakery_boot() {
-  _bakery_taste_chocolatechip_cookie();
+  // test for the baked cookie so long as this isn't a basic authorization request
+  if (!_bakery_basic_auth_attempt()) {
+    _bakery_taste_chocolatechip_cookie();
+  }
 }
 
 /**
@@ -320,12 +323,15 @@ function bakery_form_alter(&$form, $form_state, $form_id) {
     case 'user_login':
       // Provide login ability on the slave sites.
       if (!variable_get('bakery_is_master', FALSE)) {
-        // Replace two validators from user module because they log the user in
-        // and test if account exists. We want to check if the account exists on
-        // the master instead.
-        $form['#validate'] = array_diff($form['#validate'], array('user_login_authenticate_validate', 'user_login_final_validate'));
         // Also replace the submit handler with our own to set a redirect cookie.
-        $form['#submit'] = array('_bakery_login_submit');
+        // so long as this isn't via basic authorization
+        if (!_bakery_basic_auth_attempt()) {
+          // Replace two validators from user module because they log the user in
+          // and test if account exists. We want to check if the account exists on
+          // the master instead.
+          $form['#validate'] = array_diff($form['#validate'], array('user_login_authenticate_validate', 'user_login_final_validate'));
+          $form['#submit'] = array('_bakery_login_submit');
+        }
       }
       break;
     // support for masquerade
@@ -1869,3 +1875,33 @@ function bakery_pull_form_submit($form, &$form_state) {
     $form_state['redirect'] = 'user/' . $result;
   }
 }
+
+/**
+ * Test if the current connection attempt is trying with
+ * Basic Authorization headers
+ * @return bool TRUE if basic auth exists, FALSE if not
+ */
+function _bakery_basic_auth_attempt() {
+  // see if we're getting basic authorization headers
+  // if not then see if we can pull them out of the address itself
+  // example taken from restws_basic_authorization but should work for
+  // all forms of basic authorization to allow it to play nice with
+  // front end users tapping into the SSO
+  if (!empty($_SERVER['REDIRECT_HTTP_AUTHORIZATION']) && !isset($_SERVER['PHP_AUTH_USER']) && !isset($_SERVER['PHP_AUTH_PW'])) {
+    $authentication = base64_decode(substr($_SERVER['REDIRECT_HTTP_AUTHORIZATION'], 6));
+    list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':', $authentication);
+  }
+  // if we see an account attemping basic authorization, this is via
+  // a webservice account / back end call. If we see this we need to
+  // ignore bakery, even if the SSO bypass isn't set for this role.
+  // the reason for this is because we won't be able to correctly test
+  // if the account is allowed to by-pass until we actually log the user
+  // in. In this scenario, accounts that have the ability to use basic
+  // authorization headers in drupal for login have their own specialized
+  // methods of ensuring security as to which accounts can do that.
+  if (isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {
+    return TRUE;
+  }
+
+  return FALSE;
+}
