<?php
/**
 * @file
 * ELMSLN Canvas integration.
 */

define('CANVAS_DEFAULT_AVATAR_NAME', 'avatar-50.png');

/**
 * Implements hook_webcomponents_app_deliver_output_alter().
 * @param  string &$return text based output of the app
 * @param  array $app      structure of the app
 */
function elmsln_canvas_webcomponents_app_deliver_output_alter(&$return, $app) {
  // get the form to add to lrnapp-canvas-listing output
  if ($app['machine_name'] == 'lrnapp-canvas-listing') {
    $form = drupal_get_form('_elmsln_canvas_form');
    $form['app-content'] = array(
      '#markup' => $return,
    );
    $return = drupal_render($form);
  }
}

/**
 * Form tee up
 * @return [type] [description]
 */
function _elmsln_canvas_form($form = array()) {
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 * Form return from user hitting save on the dashboard.
 */
function _elmsln_canvas_form_submit($form, $form_state) {
  foreach ($form_state['input'] as $key => $machine_name) {
    // check for things that start with elmsln--map--
    if (strpos($key, 'elmsln--map--') === 0 && $machine_name != '') {
      $etid = _cis_connector_get_course_by_machine_name($machine_name);
      if ($etid) {
        $course = entity_load_single('node', $etid);
        // break out the access string and term
        $tmp = str_replace('elmsln--map--', '', $key);
        $ary = explode(":key:", $tmp);
        $access_string = $ary[1];
        $term = explode('_-_', $ary[2]);
        // convert dates to start / end dates for course
        $start_date = NULL;
        $end_date = NULL;
        if (!empty($ary[3])) {
          $date = new DateTime($ary[3]);
          $start_date = $date->format('Y-m-d H:i:s');
          $date = new DateTime($ary[4]);
          $end_date = $date->format('Y-m-d H:i:s');
        }
        // try and break things out into year and semester
        $tmp = drupal_strtolower($term[1]);
        if (strpos($tmp, 's1')) {
          $semester = 'su';
          $year = str_replace('s1', '', $tmp);
        }
        else if (strpos($tmp, 'su')) {
          $semester = 'su';
          $year = str_replace('su', '', $tmp);
        }
        else if (strpos($tmp, 'fa')) {
          $semester = 'fa';
          $year = str_replace('fa', '', $tmp);
        }
        else if (strpos($tmp, 'sp')) {
          $semester = 'sp';
          $year = str_replace('sp', '', $tmp);
        }
        $campus = '';
        $variables = array(
          'semester' => &$semester,
          'year' => &$year,
          'campus' => &$campus,
          'start_date' => &$start_date,
          'end_date' => &$end_date,
          'course' => &$course
        );
        drupal_alter('elmsln_canvas_submit', $variables);
        $existing = _cis_helper_load_machine_name_by_access_string($access_string);
        // make sure they don't match before updating / creating a new one
        if ($existing != $machine_name) {
          if ($existing == NULL) {
            // @todo drop existing so we can shift it over
          }
          // update course model for this course
          _cis_helper_update_course_model($course, $semester, $year, $campus, $access_string, $start_date, $end_date);
        }
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function elmsln_canvas_menu_alter(&$items) {
  // if canvas listing there then add this stuff in to make it show up
  if (isset($items['apps/lrnapp-canvas-listing'])) {
    $items['apps/lrnapp-canvas-listing']['type'] = MENU_NORMAL_ITEM;
    $items['apps/lrnapp-canvas-listing']['menu_name'] = 'menu-elmsln-navigation';
    $items['apps/lrnapp-canvas-listing']['weight'] = 10;
  }
}

/**
 * Implements hook_cis_helper_build_roster().
 */
function elmsln_canvas_cis_helper_build_roster($section) {
  $roster = array();
  $canvas = canvas_api('enrollment');
  $canvas->params = array(
    'enrollment_state' => array('active'),
    'include' => array(
      'avatar_url',
      'enrollments',
    ),
  );
  $users = $canvas->getEnrollment('sis_course_id:' . $section, 'course');
  // loop over resulting members and build into user array
  foreach ($users as $member) {
    // get the name from email
    $name = _elmsln_canvas_scrub_sis_user($member['sis_user_id']);
    // get role as an elms one
    $role = _elmsln_canvas_convert_role($member['role']);
    // pull out full name
    $fullname = explode(', ', $member['user']['sortable_name']);
    if (count($fullname) == 2) {
      $lname = $fullname[0];
      $fname = $fullname[1];
    }
    else {
      $fname = '';
      $lname = '';
    }
    // support ripping out the avatar_url if it's default
    if (strpos($member['user']['avatar_url'], CANVAS_DEFAULT_AVATAR_NAME)) {
      unset($member['user']['avatar_url']);
    }
    // build the roster array
    $roster[$name] = array(
      'role'  => $role,
      'mail'  => $member['sis_user_id'],
      'fname' => $fname,
      'lname' => $lname,
      'data'  => array(
        'sis' => $member['user'],
      ),
    );
  }
  return $roster;
}

/**
 * SIS user in Canvas is typically an email address
 * @param  [type] $name [description]
 * @return [type]       [description]
 */
function _elmsln_canvas_scrub_sis_user($name) {
  $tmp = explode('@', $name);
  return $tmp[0];
}

/**
 * Convert a canvas role to an elmsln role
 * @param  string $canvasRole a role from canvas
 * @return string             drupal role name
 */
function _elmsln_canvas_convert_role($canvasRole) {
  switch ($canvasRole) {
    case 'StudentEnrollment':
      $role = 'student';
    break;
    case 'TaEnrollment':
      $role = 'teaching assistant';
    break;
    case 'TeacherEnrollment':
      $role = 'instructor';
    break;
    case 'DesignerEnrollment':
      $role = 'staff';
    break;
    case 'ObserverEnrollment':
      $role = 'guest';
    break;
    default:
      $role = 'authenticated user';
    break;
  }
  return $role;
}
