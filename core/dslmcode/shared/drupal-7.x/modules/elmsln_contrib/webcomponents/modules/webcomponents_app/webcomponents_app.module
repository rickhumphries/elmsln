<?php
/**
 * @file
 * Code for the wiring up one page apps to Drupal.
 */

define('WEBCOMPONENTS_APP_PATH', 'apps');

/**
 * Load all apps we can find or a specific one if requested.
 * @param  string $machine_name optional name of an element to load
 * the registry for from it's manifest.json file (most likely)
 * @return array                the definition or definitions of all found as array
 */
function webcomponents_app_load_app_definitions($machine_name = NULL, $force_rebuild = FALSE) {
  // statically cache future calls
  $apps = &drupal_static(__FUNCTION__);
  if (!isset($apps)) {
    // Additional database cache to support alternative caches like memcache.
    if (!$force_rebuild && $cached = cache_get('webcomponents_apps')) {
      $apps = $cached->data;
    }
    else {
      // load up the definitions of apps out there
      $apps = module_invoke_all('register_webcomponent_apps');
      drupal_alter('register_webcomponent_apps', $apps);
      cache_set('webcomponents_apps', $apps);
    }
  }

  if (!is_null($machine_name)) {
    // validate that this bucket exists
    if (isset($apps[$machine_name])) {
      // check for autoloading flag if so then load the file which should contain
      // the functions needed to make the call happen
      if (isset($apps[$machine_name]['autoload']) && $apps[$machine_name]['autoload'] === TRUE) {
        include_once $apps[$machine_name]['path'] . $machine_name . '.php';
      }
      $apps[$machine_name]['machine_name'] = $machine_name;
      return $apps[$machine_name];
    }
    // nothing at this point, return nothing since we don't know that machine name
    return array();
  }
  // validate apps were found
  if (!empty($apps)) {
    return $apps;
  }
  // nothing at this point, return nothing
  return array();
}

/**
 * Implements hook_webcomponent_app_files().
 */
function webcomponents_app_webcomponent_app_files() {
  $dir = libraries_get_path('webcomponents'). '/' . WEBCOMPONENTS_APP_PATH . '/';
  return _webcomponents_find_includes($dir, array(), '.json');
}

/** 
 * Implements hook_register_webcomponent_apps().
 */
function webcomponents_app_register_webcomponent_apps() {
  $return = array();
  $files = module_invoke_all('webcomponent_app_files');
  drupal_alter('webcomponent_app_files', $files);
  // walk the files
  foreach ($files as $file) {
    // read in the manifest file
    if (strpos($file, 'manifest.json')) {
      // load the manifest json file
      $manifest = drupal_json_decode(file_get_contents($file));
      $return[$manifest['name']] = array(
        'title' => $manifest['short_name'],
        'description' => $manifest['description'],
        'path' => str_replace('manifest.json', '', $file),
      );
      // support for drupal specific properties to be set in manifest
      if (isset($manifest['app_integration'])) {
        $app = $manifest['app_integration'];
        // support for more expressive title specific to integrations
        if (isset($app['title'])) {
          $return[$manifest['name']]['title'] = $app['title'];
        }
        // support for opa-root integrations
        if (isset($app['opa-root'])) {
          $return[$manifest['name']]['opa-root'] = $app['opa-root'];
        }
        // support for generating a visualized menu item in drupal's menu system
        if (isset($app['menu'])) {
          $return[$manifest['name']]['menu'] = $app['menu'];
        }
        // support for additional properties
        if (isset($app['properties'])) {
          $return[$manifest['name']]['properties'] = $app['properties'];
        }
        // support for additional slots
        if (isset($app['slots'])) {
          $return[$manifest['name']]['slots'] = $app['slots'];
        }
        // support for a endpoint paths for getting data into the app
        if (isset($app['endpoints'])) {
          $return[$manifest['name']]['endpoints'] = $app['endpoints'];
        }
        // support for element to dynamically import / reference
        if (isset($app['element'])) {
          $return[$manifest['name']]['element'] = $app['element'];
        }
        // support for discovering and autoloading an element-name.php file
        // to make decoupled development even easier!
        if (file_exists(str_replace('manifest.json', $manifest['name'] . '.php', $file))) {
          $return[$manifest['name']]['autoload'] = TRUE;
        }
        // support automatically making a block for this element
        if (isset($app['block'])) {
          $return[$manifest['name']]['block'] = $app['block'];
        }
        // general support for anything you want to store for context
        if (isset($app['context'])) {
          $return[$manifest['name']]['context'] = $app['context'];
        }
      }
    }
  }
  return $return;
}

/**
 * Implements hook_permission().
 */
function webcomponents_app_permission() {
  $perms = array(
    'access all webcomponent apps' =>  array(
      'title' => t('Access all webcomponent apps'),
      'description' => t('This enables the user to see all apps without checking per app access.'),
    ),
  );
  // load app definitions
  $apps = webcomponents_app_load_app_definitions(NULL, TRUE);
  foreach ($apps as $machine_name => $app) {
    if (empty($app['title'])){
      $human = $machine_name;
    }
    else {
      $human = $app['title'];
    }
    $perms['access ' . $machine_name . ' app'] = array(
      'title' => t('Access @name', array('@name' => $human)),
      'description' => t('Allow user to access the one page app called @name', array('@name' => $human)),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function webcomponents_app_menu() {
  $items = array();
  // load app definitions
  $apps = webcomponents_app_load_app_definitions(NULL, TRUE);
  foreach ($apps as $machine_name => $app) {
    // support for an element being used as the root element
    if (isset($app['opa-root'])) {
      $items[WEBCOMPONENTS_APP_PATH] = array(
        'title' => $app['title'],
        'page callback' => '_webcomponents_app_load_app',
        'page arguments' => array($machine_name),
        'access callback' => '_webcomponents_app_access',
        'access arguments' => array($machine_name),
        'type' => MENU_CALLBACK,
      );
    }
    $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name] = array(
      'title' => $app['title'],
      'page callback' => '_webcomponents_app_load_app',
      'page arguments' => array(1),
      'access callback' => '_webcomponents_app_access',
      'access arguments' => array(1),
      'type' => MENU_CALLBACK,
      'options' => array('attributes' => array('name' => $machine_name)),
    );
    if (module_exists('devel')) {
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name . '/devel'] = array(
        'title' => $app['title'],
        'page callback' => '_webcomponents_app_debug',
        'page arguments' => array(1),
        'access callback' => '_webcomponents_app_access',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
      );
    }
    // optional support for adding into the menu system beyond callback
    if (isset($app['menu'])) {
      // if we are making this a menu then make it normal so it shows up in lists
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['type'] = MENU_NORMAL_ITEM;
      if (isset($app['menu']['title'])) {
        $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['title'] = $app['menu']['title'];
      }
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['menu_name'] = $app['menu']['menu_name'];
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['weight'] = $app['menu']['weight'];
    }
    // add in the data wiring if it needs it, most will
    if (isset($app['endpoints'])) {
      foreach ($app['endpoints'] as $path => $endpoint) {
        $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name . '/' . $path] = array(
          'title' => $app['title'],
          'page callback' => '_webcomponents_app_load_app_data',
          'page arguments' => array(1),
          'access callback' => '_webcomponents_app_access',
          'access arguments' => array(1),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }

  return $items;
}


/**
 * Implements hook_block_info().
 */
function webcomponents_app_block_info() {
  $blocks = array();
  // load all apps
  $apps = webcomponents_app_load_app_definitions();
  // make blocks for each app and ensure the cache is global
  // since these are just printing the tag into them they shouldn't change
  foreach ($apps as $machine_name => $app) {
    // support block per element if the registry says to
    if (isset($app['block']) && $app['block'] == TRUE) {
      $blocks[$machine_name] = array(
        'info' => t('Web Component app: @title', array('@title' => $app['title'])),
        'cache' => DRUPAL_CACHE_GLOBAL
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webcomponents_app_block_view($machine_name = '') {
  $block = array();
  // try to load the machine name (delta in block lingo)
  $app = webcomponents_app_load_app_definitions($machine_name);
  if (!empty($app) && isset($app['block']) && $app['block'] == TRUE) {
    $block['subject'] = $app['title'];
    $block['content'] = _webcomponents_app_load_app($machine_name);
  }
  return $block;
}

/**
 * Callback for apps/%/devel to view what's going on.
 */
function _webcomponents_app_debug($machine_name) {
  $app = webcomponents_app_load_app_definitions($machine_name);
  dpm($app);
  $loaded = _webcomponents_app_load_app($machine_name);
  dpm($loaded);
  // side-load the data and present it
  $data = _webcomponents_app_load_app_data($machine_name, TRUE);
  dpm($data);
  return t('@machine debug and data', array('@machine' => $machine_name));
}

/**
 * Access callback for apps.
 */
function _webcomponents_app_access($machine_name) {
  // check for the access all permission which trumps specific app access
  if (user_access('access all webcomponent apps') || user_access('access ' . $machine_name . ' app')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for loading an app
 */
function _webcomponents_app_load_app($machine_name = NULL, $debug = FALSE) {
  $return = '';
  $vars = array();
  $app = webcomponents_app_load_app_definitions($machine_name);
  // set a custom is_app property so other render alters can realize
  // this is an app rendering being modified and not a normal page component
  $app['is_app'] = TRUE;
  // ensure this exists
  if (!empty($machine_name) && !empty($app)) {
    // form the base path for loading the app
    $path = _webcomponents_base_path() . $app['path'];
    // construct the tag base to be written
    $vars = array(
      'tag' => $machine_name,
      'properties' => array(),
    );
    // support for properties to be mixed in automatically
    if (isset($app['properties'])) {
      foreach ($app['properties'] as $key => $property) {
        // support for simple function based callbacks for properties from functions
        if (is_array($property) && isset($property['callback'])) {
          // ensure it exists of that would be bad news bears
          if (function_exists($property['callback'])) {
            // only allow for simple function callbacks
            $vars['properties'][$key] = call_user_func($property['callback']);
          }
          else {
            // well it failed but at least set it to nothing
            $vars['properties'][$key] = NULL;
            // missing function, let's log this to the screen or watchdog if its debug mode
            if ($debug) {
              dpm(t('The @machine app wants to hit the callback @callback for property @key but this function could not be found', array('@key' => $key, '@machine' => $machine_name, '@callback' => $property['callback'])));
            }
            else {
              // report to the watchdog soemthing is missing
              watchdog('webcomponents_app', t('The @machine app wants to hit the callback @callback for property @key but this function could not be found', array('@key' => $key, '@machine' => $machine_name, '@callback' => $property['callback'])), array(), WATCHDOG_ERROR, 'link');
            }
          }
        }
        else {
          $vars['properties'][$key] = $property;
        }
      }
    }
    // support for slots to be mixed in automatically
    if (isset($app['slots'])) {
      foreach ($app['slots'] as $key => $slot) {
        // support for simple function based callbacks for slots from functions
        if (is_array($slot) && isset($slot['callback'])) {
          // ensure it exists of that would be bad news bears
          if (function_exists($slot['callback'])) {
            // only allow for simple function callbacks
            $vars['slots'][$key] = call_user_func($slot['callback']);
          }
          else {
            // well it failed but at least set it to nothing
            $vars['slots'][$key] = NULL;
            // missing function, let's log this to the screen or watchdog if its debug mode
            if ($debug) {
              dpm(t('The @machine app wants to hit the callback @callback for slot @key but this function could not be found', array('@key' => $key, '@machine' => $machine_name, '@callback' => $slot['callback'])));
            }
            else {
              // report to the watchdog soemthing is missing
              watchdog('webcomponents_app', t('The @machine app wants to hit the callback @callback for slot @key but this function could not be found', array('@key' => $key, '@machine' => $machine_name, '@callback' => $slot['callback'])), array(), WATCHDOG_ERROR, 'link');
            }
          }
        }
        else {
          $vars['slots'][$key] = $slot;
        }
      }
    }
    // special properties that register endpoints
    if (isset($app['endpoints'])) {
      // all end points will be able to use this for simple, secure construction
      // @see secure-request webcomponent for behavior details if doing app development
      $vars['properties']['csrf-token'] = drupal_get_token('webcomponentapp');
      $vars['properties']['end-point'] = base_path() . WEBCOMPONENTS_APP_PATH . '/' . $machine_name;
      $vars['properties']['base-path'] = base_path() . WEBCOMPONENTS_APP_PATH . '/';
      // see if anything needs ripped into the element
      foreach ($app['endpoints'] as $endpointpath => $endpoint) {
        if (isset($endpoint['property'])) {
          $vars['properties'][$endpoint['property']] = $vars['properties']['end-point'] . '/' . $endpointpath . '?token=' . $vars['properties']['csrf-token'];
        }
      }
    }
    // support for one page apps to pass down their root correctly
    else if (isset($app['opa-root'])) {
      $vars['properties']['csrf-token'] = drupal_get_token('webcomponentapp');
      $vars['properties']['base-path'] = base_path() . WEBCOMPONENTS_APP_PATH . '/';
    }
    // support compressing slots into the innerHTML tag
    if (isset($vars['slots'])) {
      // support single slot name
      if (is_string($vars['slots'])) {
        $vars['innerHTML'] = $vars['slots'];
      }
      // support for multiple slot names
      else if (is_array($vars['slots'])) {
        $vars['innerHTML'] = '';
        foreach ($vars['slots'] as $name => $content) {
          $vars['innerHTML'] .= '<span slot="' . $name . '">' . $content . '</span>';
        }
      }
    }
    // add on custom class to help idenfity that drupal delivered this
    if (!isset($vars['properties']['class'])) {
      $vars['properties']['class'] = WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    else {
      $vars['properties']['class'] .= ' ' . WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    // allow for modifying the app prior to render
    drupal_alter('webcomponent_render', $vars, $app);
    $return = theme('webcomponent', $vars);
    // allow output delivery to be modified contextually
    drupal_alter('webcomponents_app_deliver_output', $return, $app);
  }
  return $return;
}

/**
 * Data callback processor.
 */
function _webcomponents_app_load_app_data($machine_name = NULL, $debug = FALSE) {
  $return = array();
  // validate CSRF token unless anonymous was allowed here
  if ($debug || drupal_valid_token($_GET['token'], 'webcomponentapp') || $GLOBALS['user']->uid === 0) {
    $app = webcomponents_app_load_app_definitions($machine_name);
    $args = arg();
    // this ensures that apps/machine-name get shifted off
    array_shift($args);
    array_shift($args);
    // match the route that was specified in $app['endpoints']
    $endpointpath = NULL;
    if (isset($app['endpoints'])) {
      foreach ($app['endpoints'] as $path => $endpoint) {
        // we're going to compare the args array and the endpoint.
        // to do this we are going to convert the path to an array.
        $path_ary = explode('/', $path);
        // see if args and path are the same length
        if (count($path_ary) == count($args)) {
          // see if there are any differences between the two
          $ary_diff = array_diff($path_ary, $args);
          // if no differences then we found the path and we should exit
          // immediately
          if (empty($ary_diff)) {
            $endpointpath = $path;
            break;
          }
          // if there is a difference in the path but the only differences
          // are wildcards then it's a match
          else {
            $mismatch = false;
            foreach ($ary_diff as $diff) {
              if ($diff != '%') {
                $mismatch = true;
              }
            }
            // if we went through the diffs and there were no
            // matches other than % then it's a match
            if (!$mismatch) {
              $endpointpath = $path;
            }
          }
        }
      }
    }
    // make sure the machine name and the data callback both exist
    if (!empty($machine_name) && !empty($app) && isset($app['endpoints']) && function_exists($app['endpoints'][$endpointpath]['callback'])) {
      $params = filter_var_array($_GET, FILTER_SANITIZE_STRING);
      // include additional url arguments to downstream
      // check for extended args on this call
      $return = call_user_func($app['endpoints'][$endpointpath]['callback'], $machine_name, WEBCOMPONENTS_APP_PATH . '/' . $machine_name, $params, $args);
      // allow other modules to jump in after callback has run
      drupal_alter('webcomponents_app_data', $return, $app);
    }
    else {
      $return = array(
        'status' => '404',
        'detail' => t('Not a valid callback'),
      );
    }
  }
  else {
    $return = array(
      'status' => '403',
      'detail' => t('Invalid CSRF token'),
    );
  }
  // nothing set so make it 200 even though it already is
  if (empty($return['status'])) {
    $return['status'] = '200';
  }
  // ensure there's some form of detail even if empty
  if (empty($return['detail'])) {
    $return['detail'] = '';
  }
  // ensure there's some form of detail even if empty
  if (empty($return['environment'])) {
    $return['environment'] = array();
  }
  // allow output delivery to be modified contextually
  drupal_alter('webcomponents_app_deliver_data', $return);
  // support for debugging the call in which we send the data back for processing
  if (!$debug) {
    // define return type
    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', $return['status']);
    // output the response as json
    print drupal_json_encode($return);
    // skip official drupal exit routine so we can exit faster and
    // avoid possible integration issues with things like devel which
    // inject data on the way out the door
    exit;
  }
  else {
    return $return;
  }
}